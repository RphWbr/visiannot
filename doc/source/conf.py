# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

from os.path import abspath, join, dirname
import sys

path = dirname(abspath(__file__))
sys.path.insert(0, abspath('.'))
sys.path.insert(0, abspath(join(path, '..', '..')))

from visiannot import __version__ as version
from datetime import datetime


### in order to automatically generate APIreference index files,
# this block must be uncommented and the documentation must be generated
# locally, then re-comment this block and build the documentation on
# ReadTheDocs
###

# text_top = "The package **visiannot** is made up of three sub-packages:\n"

# text_bottom = """
# The sub-package **configuration** contains modules where are defined the
# classes for the creation of the configuration GUI.

# The sub-package **tools** contains modules with functions that may be used
# outside of **ViSiAnnoT**. In particular, the modules **ToolsPyQt** and
# **ToolsPyqtgraph** are an overlayer of **PyQt5** and **pyqtgraph**
# respectively. They may be used in order to ease the creation of a GUI and
# scientific graphics respectively. See chapters :ref:`toolspyqt` and
# :ref:`toolspyqtgraph`.

# The sub-package **visiannot** contains modules where are defined the classes
# for the creation of the ViSiAnnoT GUI.

# The summary of the modules can be found at the top of their respective page.
# """

# from autoDocAPI import generateIndexFiles
# generateIndexFiles(
#     "visiannot", "../..", text_top=text_top, text_bottom=text_bottom
# )

###
###

from summaryGroups import setPackageName
setPackageName("visiannot")
from summaryGroups import setup


# -- Project information -----------------------------------------------------

project = 'ViSiAnnoT'
copyright = '2020-%s, Universit√© Rennes 1' % datetime.today().year
author = 'Raphael Weber'

# The full version, including alpha/beta/rc tags
release = version

# The short X.Y version
# version = '.'.join(version.split('.')[:2])
version = '0.0.10'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.imgmath',
    'sphinx.ext.viewcode',
    'sphinx.ext.autosummary',
    'autodocsumm',
]

autodoc_member_order = 'groupwise'
autoclass_content = 'init'
numfig = True

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'ViSiAnnoTdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'ViSiAnnoT.tex', 'ViSiAnnoT Documentation',
     'Raphael Weber', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'visiannot', 'ViSiAnnoT Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'ViSiAnnoT', 'ViSiAnnoT Documentation',
     author, 'ViSiAnnoT', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']
